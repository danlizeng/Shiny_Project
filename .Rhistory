sum(m_accepted$freq)
m_ad_perc <- sum(m_accepted$Freq) / 2691
f_ad_perc <- sum(f_accepted$Freq) / 1835
remove(m_ad_percentage)
library('reshape2')
dcast(ucb, Gender~Dept, value.var = 'Freq', fun = sum)
ad_ucb <- split(ucb, ucb$Admit)
ucb_by_gen <- split(ucb, ucb$Gender)
remove(ad_ucb)
dcast(ucb_by_gen, Dept~Admit, value.var = 'Freq', fun = sum)
ucb_by_gen
ucb_by_Dept <- split(ucb, ucb$Dept)
remove(ucb_by_gen)
ucb_by_Dept
accep_rate_fun <- function(i){
total_app <- tapply(X = i$Freq, INDEX = i$Gender, FUN = sum)
admit_app <- i[i$Admit == 'Admitted',]
return(admit_app / total_app)
}
result <- lapply(ucb_by_Dept, accep_rate_fun)
warnings
admit_app <- x$Freq(which(x$Admit == 'Admitted'))
bb <- ucb$Freq(which(ucb$Admit=='Admitted'))
#Create a function calculating acceptance rates
accep_rate_fun <- function(x){
total_app <- aggregate(x$Freq, by = x$Gender, sum)
admit_app <- x[x$Admit == 'Admitted',]
return(admit_app / total_app)
}
# Calculating acceptance rate by gender, of depts
result <- lapply(ucb_by_Dept, accep_rate_fun)
#Create a function calculating acceptance rates
accep_rate_fun <- function(x){
total_app <- aggregate(x$Freq, by = list(Gender), sum)
admit_app <- x[x$Admit == 'Admitted',]
return(admit_app / total_app)
}
# Calculating acceptance rate by gender, of depts
result <- lapply(ucb_by_Dept, accep_rate_fun)
#Create a function calculating acceptance rates
accep_rate_fun <- function(x){
total_app <- aggregate(x$Freq, by = list(x$Gender), sum)
admit_app <- x[x$Admit == 'Admitted',]
return(admit_app / total_app)
}
# Calculating acceptance rate by gender, of depts
result <- lapply(ucb_by_Dept, accep_rate_fun)
#Create a function calculating acceptance rates
accep_rate_fun <- function(x){
total_app <- aggregate(x$Freq, by = list(x$Gender), sum)
admit_app <- x[x$Admit == 'Admitted',4]
return(admit_app / total_app)
}
# Calculating acceptance rate by gender, of depts
result <- lapply(ucb_by_Dept, accep_rate_fun)
#Create a function calculating acceptance rates
accep_rate_fun <- function(x){
total_app <- aggregate(x$Freq, by = list(x$Gender), sum)
admit_app <- x[x$Admit == 'Admitted','Freq']
return(admit_app / total_app)
}
# Calculating acceptance rate by gender, of depts
result <- lapply(ucb_by_Dept, accep_rate_fun)
# Calculating acceptance rate by gender, of depts
dcast(data = ucb,
formula = Gender~Dept,
value.var = 'Freq',
fun = sum)
admit_ucb <- ucb[ucb$Admit =='Admitted',]
admit_ucb
# Use dcast to generate the same dimensions for the purpose of further division
admit_app <- dcast(data = admit_ucb,
formula = Gender~Dept,
value.var = 'Freq',
fun = sum)
admit_app
accept_rate <- admit_app / total_app
total_app <- dcast(data = ucb,
formula = Gender~Dept,
value.var = 'Freq',
fun = sum)
accept_rate <- admit_app / total_app
class(admit_app)
admit_app <- admit_app [-1,-1]
admit_app
admit_app <- admit_app [-1,]
admit_app <- dcast(data = admit_ucb,
formula = Gender~Dept,
value.var = 'Freq',
fun = sum)
admit_app <- admit_app [-1,]
admit_app
# Subsetting ucb to a dataframe containing only the ones got accepted
admit_ucb <- ucb[ucb$Admit =='Admitted',]
admit_ucb
# Use dcast to generate the same dimensions for the purpose of further division
admit_app <- dcast(data = admit_ucb,
formula = Gender~Dept,
value.var = 'Freq',
fun = sum)
# Subsetting ucb to a dataframe containing only the ones got accepted
admit_ucb <- ucb[ucb$Admit =='Admitted',]
admit_ucb
# Use dcast to generate the same dimensions for the purpose of further division
admit_app <- dcast(data = admit_ucb,
formula = Gender~Dept,
value.var = 'Freq',
fun = sum)
library('reshape2')
# Calculating the sum of applicants by gender & depts
total_app <- dcast(data = ucb,
formula = Gender~Dept,
value.var = 'Freq',
fun = sum)
total_app
total_app <- total_app [2:3,2:6]
total_app
total_app <- total_app [,-1]
total_app <- dcast(data = ucb,
formula = Gender~Dept,
value.var = 'Freq',
fun = sum)
total_app <- total_app [,-1]
total_app
admit_app <- admit_app [,-1]
admit_app
accept_rate <- admit_app / total_app
accept_rate
library('dplyr')
ucb <- as.data.frame(UCBAdmissions)
ucb <- tbl_df(ucb)
View(ucb)
ucb <- tbl_df(UCBAdmissions)
ucb <- tbl_df(ucb)
filter(ucb, Admit == 'Rejected', Dept == 'D')
filter(ucb, Gender == 'Female', Admit == 'Rejected', Dept == 'D')
filter(ucb, Gender == 'Female', Admit == 'Rejected', Dept == 'D')
ucb <- as.data.frame(UCBAdmissions)
str(ucb)
f_rejected_D <- with(ucb, ucb[Gender =='Female' & Dept == 'D' & Admit == 'Rejected',])
f_rejected_D
which(f_rejected_D)
f_rejected_D
which(f_rejected_D)
?which
which(ucb[Gender =='Female' & Dept == 'D' & Admit == 'Rejected',])
which(ucb$Gender =='Female' & ucb$Dept == 'D' & ucb$Admit == 'Rejected')
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
texas <- read.csv("data/texas.csv")
?texas
load("~/Downloads/data/texas.csv")
texas <- read.csv("~/Downloads/data/texas.csv")
View(texas)
View(texas)
qplot(long, lat, data = texas)
qplot(long, lat, data = texas, geom = 'polygon', group = group)
install.packages('maps')
library('maps')
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = group)
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = bin, fill = group)
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin)
?qplot
library('ggplot2')
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
fill = bin)
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin)
tx2 <- qplot(long, lat, data = texas,
geom = 'polygon', fill = bin, group = group)
tx2 <- qplot(long, lat, data = texas,
geom = 'polygon', fill = bin, group = group) + coord_map()
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin)+ coord_map()
install.packages('mapproj')
library('mapproj')
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin)+ coord_map()
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin)
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map()
remove(tx2)
install.packages('RColorBrewer')
library(RColorBrewer)
display.brewer.all()
texas2 + scale_fill_brewer(palette = Greens)
texas2 + scale_fill_brewer(palette = 'Greens")
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map()
texas2 + scale_fill_brewer(palette = 'Greens")
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map()
texas2 + scale_fill_brewer(palette = 'Greens")
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map() + scale_fill_brewer(palette = 'Greens")
group = group, fill = bin) + scale_fill_brewer(palette = 'Greens")
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + scale_fill_brewer(palette = 'Greens")
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map() + scale_fill_brewer(palette = 'BuGn')
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map()
texas2 + scale_fill_brewer(palette = 'Greens')
texas2 + scale_fill_brewer(palette = 'Greens')
texas2 + scale_fill_brewer(palette = 'BuPu')
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map() scale_fill_brewer(palette = 'BuPu')
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map() + scale_fill_brewer(palette = 'BuPu')
texas2 <- map_data('county')
qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map()
texas2 + scale_fill_brewer(palette = 'BuPu')
texas2 + scale_fill_brewer(
palette = 'BuPu')
class('texas2')
texas2 <- map_data('county')
texas2 <- qplot(long, lat, data = texas, geom = 'polygon',
group = group, fill = bin) + coord_map()
texas2 + scale_fill_brewer(
palette = 'BuPu')
palette = 'BuPu') +  theme_bw()
texas2 + scale_fill_brewer(
palette = 'BuPu') + theme_bw()
texas2 + scale_fill_brewer(
palette = 'BuPu') + theme_grey()
texas2 + scale_fill_brewer(
palette = 'BuPu') + theme_bw()
texas2 + scale_color_gradient( low = 'blue', high = 'purple')
install.packages('ggthemes')
library('ggthemes')
texas2 + theme_excel()
install.packages('devtools')
library('devtools')
devtools::install_github('jrnold/ggthemes')
library('ggthemes')
library('ggthemes')
texas2 + theme_wsj()
texas2 + theme_economist()
d2 <- subset(diamonds, color == 'D')
cp <- qplot(carat, price, data = diamonds)
library(ggplot2)
cp <- qplot(carat, price, data = diamonds)
d2 <- subset(diamonds, color == 'D')
cc <- qplot(color, data = d2, fill = cut, position = 'fill')
hd <- qplot(displ, hwy, data = mpg, color = class, shape = class)
p <- qplot(color, data = diamonds, fill = cut, position = 'dodge')
p <- qplot(color, data = diamonds, fill = cut, position = 'dodge')
p <- qplot(color, data = diamonds, fill = cut, position = 'dodge')
library(ggplot2)
library(ggthemes)
p <- qplot(color, data = diamonds, fill = cut, position = 'dodge')
library(ggthemes)
p <- qplot(color, data = diamonds,fill = cut,
position = "dodge")
p<- ggplot(data = diamonds, aes(x = color)) +
geom_bar(aes(fill = cut), position = "dodge")
p + theme_excel() + scale_fill_excel()
p <- qplot(color, data = diamonds, fill = cut, position = 'dodge')
texas2
texas2 + xlab('')
texas2 + xlab('') + ylab('')
texas2 + xlab('') + ylab('') + theme
texas2 + xlab('') + ylab('') + theme_bw()
texas2 + xlab('') + ylab('') + theme_bw() + title(Texas_Bin)
texas2 + xlab('') + ylab('') + theme_bw() + title('Texas_Bin')
texas2 + xlab('') + ylab('') + theme_bw() + ggtitle('Texas')
texas2 + xlab('') + ylab('') + theme_bw() + ggtitle('Texas') + scale_color_brewer('BuPu')
texas2 + xlab('') + ylab('') + theme_bw() + ggtitle('Texas') + scale_fill_brewer(palette = 'BuPu')
texas2 + xlab('') + ylab('') + theme_bw() + ggtitle('Texas') + scale_fill_brewer(palette = 'BuPu') + coord_map()
texas2 + xlab('') + ylab('')
+ theme_bw() + ggtitle('Texas')
+ scale_fill_brewer(palette = 'BuPu')
texas2 + xlab('') + ylab('') + theme_bw() + ggtitle('Texas') + scale_fill_brewer(palette = 'BuPu')
texas2 + xlab('') + ylab('') + theme_bw() + ggtitle('Texas') + scale_fill_brewer(palette = 'BuPu') + coord_map()
texas2 + xlab('') + ylab('') + theme_bw() + ggtitle('Population of the Texas Counties') + scale_fill_brewer(palette = 'BuPu') + coord_map()
texas2 + xlab('') + ylab('') + theme_bw() + ggtitle('Population of Texas Counties') + scale_fill_brewer(palette = 'Blues') + coord_map()
?mapproj
?map_data
q + theme(legend.position = "bottom")
q <- qplot(displ, hwy, data = mpg, color =cty)
q <- qplot(displ, hwy, data = mpg, color =cty)
q + theme(legend.position = "bottom")
q + guides(color = 'colorbar')
texas2 + scale_fill_grey(name = 'Legend',
labels = c('label1', 'label2',
'label3', 'label4', 'label5'))
texas2 + scale_fill_grey(name = 'Population',
labels = c('0-999', '1000-9999',
'10000-99999', '100000-999999', '1000000+'))
texas2 + scale_fill_brewer(
palette = "Blues",
name = "Population",
labels = c("0 - 999", "1,000 - 9,999",
"10,000 - 99,999", "100,000 - 999,999",
"1,000,000+")) +
xlab("") +
ylab("") +
theme_bw() +
coord_map() +
ggtitle("Population of Texas Counties")
library(googleVis); library(WDI); library(RJSONIO)
suppressPackageStartupMessages(library(googleVis))
DF <- WDI(country=c("CN","RU","BR","ZA","IN",'DE','AU','CA','FR','IT',
'JP','MX','GB','US','ID','AR','KR','SA','TR'),
indicator=c("NY.GDP.MKTP.CD", 'SP.DYN.LE00.IN', 'EN.ATM.CO2E.KT'),
start=2000, end=2009)
gdp_map <- gvisMotionChart(DF, idvar="country", timevar="year",
xvar='EN.ATM.CO2E.KT',
yvar='NY.GDP.MKTP.CD')
plot(gdp_map)
install.packages('googleVis')
install.packages('WDI')
library(googleVis); library(WDI); library(RJSONIO)
suppressPackageStartupMessages(library(googleVis))
DF <- WDI(country=c("CN","RU","BR","ZA","IN",'DE','AU','CA','FR','IT',
'JP','MX','GB','US','ID','AR','KR','SA','TR'),
indicator=c("NY.GDP.MKTP.CD", 'SP.DYN.LE00.IN', 'EN.ATM.CO2E.KT'),
start=2000, end=2009)
gdp_map <- gvisMotionChart(DF, idvar="country", timevar="year",
xvar='EN.ATM.CO2E.KT',
yvar='NY.GDP.MKTP.CD')
plot(gdp_map)
library(shiny)
runExample('o1_hello')
runExample('o1_hello')
runExample("01_hello")
runApp('~/test_shiny')
runApp('~/test_shiny')
runApp('~/test_shiny')
runExample("02_text")
runExample("05_sliders")
runApp('Desktop/Shiny1')
runApp('Desktop/Shiny1')
library('reshape2')
iris_tr <- transform(iris, v1 = log(Sepal.Length))
iris
View(iris_tr)
?quantile
labels <- c('A','B','C','D')
groupvec <- quantile(iris_tr$v1, c(0,0.25,0.50,0.75,1.0))
iris_tr$2 <- cut(iris_tr$v1, breaks = groupvec, labels = labels)
iris_tr$v2 <- cut(iris_tr$v1, breaks = groupvec, labels = labels)
groupvec
groupvec <- quantile(iris_tr$v1, c(0,0.25,0.50,0.75,1.0))
labels <- c('A','B','C','D')
iris_tr$v2 <- cut(iris_tr$v1, breaks = groupvec, labels = labels)
groupvec
iris_tr$v2 <- cut(iris_tr$v1, breaks = groupvec, labels = labels, include.lowest = T)
?rep
vec <- rep(c(0,1),c(4,6))
vec_fac <- factor(vec, labels=c('male','female'))
vec
class(vec_fac)
class(vec)
vec1 <- factor(rep(c(0,1,3),c(4,6,2)))
class(vec1)
vec1
levels(vec1) <- c('male','female','male')
vec1
data <- iris[,1:4]
View(data)
head(data,5)
?head
data_l <- stack(data)
View(data_l)
data_w <- unstack(data_l)
View(data_w)
data == data_w
fun = mean
fun = mean)
dcast(data = iris,
formula = Species ~ .,
value.var = 'Petal.Width',
fun = mean)
id = 'Species')
iris_long <- melt(data = iris,
id = 'Species')
View(iris_long)
set.seed(1)
i <- sample(nrow(iris_long,10))
i <- sample(nrow(iris_long),10)
iris_long[i,]
?sample
tips
dcast(tips, sex~., value.var = 'tip', fun = mean )
str(tips)
dcast(tips, sex~time, value.var = 'tip', fun = mean)
id.vars = c('sex', 'smoker', 'day', 'size', 'time'))
tips_melt <- (tips,
id.vars = c('sex', 'smoker', 'day', 'size', 'time'))
tips_melt <- (data = tips,
tips_melt <- (data = tips,
id.vars = c('sex', 'smoker', 'day', 'size', 'time'))
tips_melt <- (data = tips, id.vars = c('sex', 'smoker', 'day', 'size', 'time'))
tips_melt <- melt(data = tips,
id.vars = c('sex', 'smoker', 'day', 'size', 'time'))
View(tips_melt)
View(tips_melt)
split(tips_melt, by = 'variable')
split_iris <- split(tips_melt, tips_melt$variable)
head(split_iris,5)
merge(split_iris[[1]], split_iris[[2]],
by = c('sex', 'smoker', 'day', 'size', 'time'))
iris_new <- merge(split_iris[[1]], split_iris[[2]],
by = c('sex', 'smoker', 'day', 'size', 'time'))
str(iris_new)
head(iris_new)
library(plyr)
rename(iris_new,c('value.x' = 'total_bill', 'value.y' = 'tip'))
head(iris_new)
rename(iris_new,c('value.x' = 'total_bill', 'value.y' = 'tip'))
head(iris_new)
iris_new <- rename(iris_new,c('value.x' = 'total_bill', 'value.y' = 'tip'))
head(iris_new)
remove(with(iris_new,c('variable.x','variable.y'))
head(iris_new)
head(iris_new)
remove(with(iris_new,iris_new[c('variable.x','variable.y')])
head(iris_new)
remove(with(iris_new,iris_new['variable.x','variable.y'])
head(iris_new)
remove(with(iris_new,iris_new['variable.x','variable.y']))
remove(c(iris_new$variable.x,iris_new$variable.y))
remove(c(iris_new$'variable.x',iris_new$'variable.y'))
remove(iris_new$'variable.x',iris_new$'variable.y')
with(iris_new,remove(iris[variable.x,variable.y]))
with(iris_new,remove(iris['variable.x','variable.y']))
head(iris_new)
?remove
with(iris_new, remove(iris_new[variable.x,variable.y]))
?with
with(iris_new, {remove(iris_new[variable.x,variable.y]})
with(remove(iris_new,[variable.x,variable.y]))
remove(iris_new$variable.x)
remove(iris_new$'variable.x')
remove('iris_new$variable.x')
str(iris_new)
rm(iris_new$variable.x)
iris_new <- iris_new[-iris_new$variable.x]
within(iris_new, rm('variable.x'))
with(iris_new, rm('variable.x'))
head(iris_new)
within(iris_new, rm('variable.x'))
head(iris_new)
iris_new$variable.x = NULL
head(iris_new)
iris_new$variable.y = NULL
head(iris_new)
8 + 5 # Basic math; press cmd/ctrl-enter
1:250  # Prints numbers 1 to 100 across several lines
print("Hello World!")  # Prints "Hello World" in console
x <- 1:5  # Put the numbers 1-5 in the variable x
y <- c(6, 7, 8, 9, 10)  # Puts the numbers 6-10 in y
rm()
data(airmiles) # Listed as "ts" for "time-series"
airmiles
str(airmiles)
fix(airmiles)
fix(airmiles)
data(anscombe)  # Appears under "Data" in the Workspace
str(anscombe)
View(anscombe)
rm(list = ls())  # Clean up
x <- 0:10
x3 <- seq(10)
x4 <-  seq(30, 0 , by = -3)
x6 <- scan()
rm(list(ls()))
rm(list(ls())
rm(list(ls()))
rm(list = ls())
admit1 <- as.data.frame.table(UCBAdmissions)  # Coerces to data frame
View(admit1)
install.packages("RColorBrewer")
library(foreign)
install.packages("shiny")
setwd("~/Desktop/Bootcamp/Project2")
shiny::runApp('Entre')
runApp('Entre')
setwd("~/Desktop/Bootcamp/Project2/Entre")
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/Bootcamp/Project2/Entre")
runApp()
runApp()
setwd("~/Desktop/Bootcamp/Project2")
setwd("~/Desktop/Bootcamp/Project2/Entre")
runApp()
